---
title: "Algorithmic Fairness"
author: "Gaylen Fronk & Kendra Wyant"
date: "`r lubridate::today()`"
number-sections: true
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 4
editor_options: 
  chunk_output_type: console
---

### Set Up Environment

```{r}
study <- "match"
version <- "v6"
cv <- "nested"
y_col_name <- "pp_hybrid_wk4_outcome"
```

Packages for script
```{r packages_script, message=FALSE, warning=FALSE}
library(tidyposterior)
library(tidyverse)
library(tidymodels)

theme_set(theme_classic()) 
```

Absolute paths
```{r, absolute paths}
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true")
path_models <- format_path(str_c("studydata/match/models/", y_col_name))
```


Chunk Defaults
```{r defaults, include=FALSE}
knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```

Source 
```{r source}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
```

### Read in preds and metrics for best model

```{r load_preds_metrics}

auroc_dem <- read_csv(file.path(path_models,
                          str_c("auroc_dem_", 
                                version, "_", cv, ".csv")),
                      show_col_types = FALSE) |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10), 3)) |>   # assumes 3x10 fold
  select(-outer_split_num) |> 
  glimpse()

```

### Get Median Posterior Probabilities and contrast analyses

function
```{r}
calc_pp <- function (data, dem_var) {
  
  if (dem_var == "sex") {
    data <- data |> 
      select(id = repeat_num, id2 = fold_num, Female, Male)
  } else if (dem_var == "income") {
    data <- data |> 
      select(id = repeat_num, id2 = fold_num, `Below Poverty Line`, `Above Poverty Line`)
  } else if (dem_var == "race_ethnicity") {
    data <- data |> 
      select(id = repeat_num, id2 = fold_num, `Not White`, `White/Non-Hispanic`)
  } else {
    stop(dem_var, " not in data")
  }
  
  set.seed(101)
  pp <- data |> 
    perf_mod(formula = statistic ~ model + (1 | id2/id),
             transform = tidyposterior::logit_trans,  
             iter = 2000, chains = 4,  
             adapt_delta = .99,
             family = gaussian) 

  pp_tidy <- pp |> 
    tidy(seed = 123)

  q = c(.025, .5, .975)
  ci <- pp_tidy |> 
    group_by(model) |> 
    summarize(pp_median = quantile(posterior, probs = q[2]),
              pp_lower = quantile(posterior, probs = q[1]), 
              pp_upper = quantile(posterior, probs = q[3]))  |> 
    arrange(model)
  
  
  contrast_lists <- 
    if (dem_var == "sex") {
    c(list("Male"), list("Female"))
  } else if (dem_var == "income") {
    c(list("Above Poverty Line"), list("Below Poverty Line"))
  } else if (dem_var == "race_ethnicity") {
    c(list("White/Non-Hispanic"), list("Not White"))
  } else {
    stop(dem_var, " not in data")
  }
      
  ci_contrast <- pp |>
    contrast_models(contrast_lists[1],  contrast_lists[2]) |> 
  summary(size = 0) 
  
  ci_median_contrast <- pp |> 
    contrast_models(contrast_lists[1],  contrast_lists[2]) |>  
    group_by(contrast) |> 
    summarize(median = quantile(difference, .5)) |> 
    mutate(contrast = str_remove(contrast, "\\."))


ci_contrast <- ci_contrast |> 
    left_join(ci_median_contrast, by = c("contrast")) |> 
    select(contrast, probability, median, lower, upper) 
  
  list(ci = ci, ci_contrast = ci_contrast)
}
```

Sex
```{r}
sex <- calc_pp(data = auroc_dem, "sex")

(pp_sex <- pluck(sex, "ci"))

(contrast_sex <- pluck(sex, "ci_contrast"))
```

Income
```{r}
income <- calc_pp(data = auroc_dem, "income")

(pp_income <- pluck(income, "ci"))

(contrast_income <- pluck(income, "ci_contrast"))
```

Race/Ethnicity
```{r}
race_eth <- calc_pp(data = auroc_dem, "race_ethnicity")

(pp_race_eth <- pluck(race_eth, "ci"))

(contrast_race_eth <- pluck(race_eth, "ci_contrast"))
```


Bind all pp/contrast tibbles and save
```{r}
pp_sex |> 
  bind_rows(pp_income) |> 
  bind_rows(pp_race_eth) |> 
  write_csv(file.path(path_models, "pp_dem_all.csv"))

contrast_sex |> 
  bind_rows(contrast_income) |> 
  bind_rows(contrast_race_eth) |> 
  write_csv(file.path(path_models, "pp_dem_contrast_all.csv"))
```