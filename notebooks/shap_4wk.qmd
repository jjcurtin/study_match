---
title: "SHAP for 4-Week Model"
author: "Gaylen Fronk"
date: "`r lubridate::today()`"
number-sections: true
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 4
editor_options: 
  chunk_output_type: console
---

```{r set_variables}
study <- "match"
version <- "v5"
y_col_name <- "pp_hybrid_wk4_outcome"
```

```{r, packages_script}
#| message: false
#| warning: false

# packages for script
library(tidyverse)

theme_set(theme_classic()) 
```

```{r, packages_workflow}
#| message: false
#| warning: false

# handle conflicts
options(conflicts.policy = "depends.ok")
```

```{r, absolute paths}

# absolute paths
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_data <- str_c("P:/studydata/match/chtc/", y_col_name)},
        
        # IOS paths
        Darwin = {
          path_data <- str_c("/Volumes/private/studydata/match/chtc/", y_col_name)},
        
        # Linux paths
        Linux = {
          path_data <- str_c("~/mnt/private/studydata/match/chtc/", y_col_name)}
)
```

```{r defaults}

# chunk defaults

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```

## Read in data

```{r}
local <- read_csv(file.path(path_data, str_c("shap_loocv_", version), 
                            "output", "batch_results.csv"),
                  col_types = "cddd")

glimpse(local)
```
This is already local SHAP values because we have one observation per subid per variable.

## Get global Shapley values

```{r}
global <- local |> 
  group_by(variable_name) |> 
  summarize(abs_shap = abs(mean(contribution))) |> 
  arrange(desc(abs_shap))

glimpse(global)

```

Delineate treatment interactions
```{r}
global <- global |> 
  mutate(tx_int = if_else(str_detect(variable_name, "treatment_"), "Interaction", "Main Effect"))

local <- local |> 
  mutate(tx_int = if_else(str_detect(variable_name, "treatment_"), "Interaction", "Main Effect"))
```

## Make global figures

Overall
```{r}
#| label: fig-shap-global

fig_shap_global <- global |> 
  arrange(desc(abs_shap)) |> 
  slice(1:25) |> 
  arrange(abs_shap) |> 
  mutate(variable_name = str_replace(variable_name, "treatment_", "")) |> 
  mutate(variable_name = fct_inorder(variable_name)) |> 
  ggplot(mapping = aes(x = variable_name, y = abs_shap, color = tx_int)) +
  geom_point(size = 2) +
  geom_segment(aes(x = variable_name, y = abs_shap, xend = variable_name),
               yend = 0) +
  labs(
    x = "Feature Name",
    y = "Mean |Shapley value|",
    color = "Feature Type"
  ) +
  coord_flip()
```

Global Shapley values among treatment interactions
```{r}
#| label: fig-shap-global-tx

fig_shap_global_tx <- global |> 
  filter(tx_int == "Interaction") |> 
  arrange(desc(abs_shap)) |> 
  slice(1:25) |> 
  arrange(abs_shap) |> 
  mutate(variable_name = str_replace(variable_name, "treatment_", "")) |> 
  mutate(variable_name = fct_inorder(variable_name)) |> 
  ggplot(mapping = aes(x = variable_name, y = abs_shap, color = tx_int)) +
  geom_point(size = 2) +
  geom_segment(aes(x = variable_name, y = abs_shap, xend = variable_name),
               yend = 0) +
  labs(
    x = "Feature Name",
    y = "Mean |Shapley value|"
  ) +
  coord_flip() +
  theme(legend.position = "none")
```

## Make Sina plots (local) 

Overall
```{r}

```

Local Shapley values among treatment interactions
```{r}

```

from ema
```{r make_shap_local}
# # get colors for models to match other figures that use faceting or grouping
# colors_hex <- scales::hue_pal()(3) # week = 1, day = 2, hour = 3
#
# # order features to match global plot
# shap_levels <- shap_global_all |>
#   mutate(variable_grp = reorder(variable_grp, mean_value, sum)) |>
#   pull(variable_grp) |>
#   levels()
#
# # downsample to 10% of observations for each plot
# downsample_ratio <- .10
# ids_week <- shap_local_week |>
#   pull(id_obs) |>
#   unique()
# ids_week <- ids_week |> sample(size = round(length(ids_week)/(1/downsample_ratio)))
# ids_day <- shap_local_day |>
#   pull(id_obs) |>
#   unique()
# ids_day <- ids_day |> sample(size = round(length(ids_day)/(1/downsample_ratio)))
# ids_hour <- shap_local_hour |>
#   pull(id_obs) |>
#   unique()
# ids_hour <- ids_hour |> sample(size = round(length(ids_hour)/(1/downsample_ratio)))
# 
# # week panel
# panel_shap_local_week <- shap_local_week |>
#   filter(id_obs %in% ids_week) |>
#   mutate(variable_grp = factor(variable_grp, levels = shap_levels)) |>
#   ggplot(mapping = aes(x = variable_grp, y = value)) +
#   ggforce::geom_sina(method = "counts", maxwidth = 0.7, alpha = 0.4,
#                      color = colors_hex[1]) +
#   geom_hline(yintercept = 0) +
#   scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
#   ylab("Shapley Value") +
#   xlab("") +
#   theme(axis.text = element_text(size = 9.5)) +
#   coord_flip()
# 
# # day panel
# panel_shap_local_day <- shap_local_day |>
#   filter(id_obs %in% ids_day) |>
#   mutate(variable_grp = factor(variable_grp, levels = shap_levels)) |>
#   ggplot(mapping = aes(x = variable_grp, y = value)) +
#   ggforce::geom_sina(method = "counts", maxwidth = 0.7, alpha = 0.4,
#                      color = colors_hex[2]) +
#   geom_hline(yintercept = 0) +
#   scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
#   ylab("Shapley Value") +
#   xlab("") +
#   theme(axis.text = element_text(size = 9.5)) +
#   coord_flip()
# 
# # hour panel
# panel_shap_local_hour <- shap_local_hour |>
#   filter(id_obs %in% ids_hour) |>
#   mutate(variable_grp = factor(variable_grp, levels = shap_levels)) |>
#   ggplot(mapping = aes(x = variable_grp, y = value)) +
#   ggforce::geom_sina(method = "counts", maxwidth = 0.7, alpha = 0.4,
#                      color = colors_hex[3]) +
#   geom_hline(yintercept = 0) +
#   scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
#   ylab("Shapley Value") +
#   xlab("") +
#   theme(axis.text = element_text(size = 9.5)) +
#   coord_flip()
```




