{
  "hash": "0d833b6d5283b3e0e9eb2741b296d02c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Algorithmic Fairness\"\nauthor: \"Gaylen Fronk & Kendra Wyant\"\ndate: \"2024-07-11\"\nnumber-sections: true\noutput: \n  html_document:\n    toc: true \n    toc_depth: 4\nformat:\n  html:\n    embed-resources: true\n    toc: true\n    toc-depth: 4\neditor_options: \n  chunk_output_type: console\n---\n\n\n### Set Up Environment\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nstudy <- \"match\"\nversion <- \"v6\"\ncv <- \"nested\"\ny_col_name <- \"pp_hybrid_wk4_outcome\"\n```\n:::\n\n\nPackages for script\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyposterior)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.5      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ntheme_set(theme_classic()) \n```\n:::\n\n\nAbsolute paths\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"a58e57da996d1b70bb9a5b58241325d6fd78890f\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npath_models <- format_path(str_c(\"studydata/match/models/\", y_col_name))\n```\n:::\n\n\n\nChunk Defaults\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\nknitr::opts_chunk$set(attr.output='style=\"max-height: 500px;\"')\n\noptions(tibble.width = Inf)\noptions(tibble.print_max = Inf)\n```\n:::\n\n\nSource \n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# EDA\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"c045eee2655a18dc85e715b78182f176327358a7\"\n```\n\n\n:::\n:::\n\n\n### Read in preds and metrics for best model\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nauroc_dem <- read_csv(file.path(path_models,\n                          str_c(\"auroc_dem_\", \n                                version, \"_\", cv, \".csv\")),\n                      show_col_types = FALSE) |> \n  arrange(outer_split_num) |> \n  mutate(repeat_num = rep(str_c(\"repeat\", 1:3), each = 10),\n         fold_num = rep(str_c(\"fold\", 1:10), 3)) |>   # assumes 3x10 fold\n  select(-outer_split_num) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\nRows: 30\nColumns: 8\n$ Female               <dbl> 0.5783251, 0.7061404, 0.6829268, 0.5608696, 0.760…\n$ Male                 <dbl> 0.6911765, 0.7551669, 0.7989510, 0.7280702, 0.704…\n$ `Not White`          <dbl> 0.7777778, 0.6969697, 0.7098214, 0.7163636, 0.795…\n$ `White/Non-Hispanic` <dbl> 0.5805322, 0.6601562, 0.6696833, 0.6434109, 0.617…\n$ `Above Poverty Line` <dbl> 0.5508658, 0.7037500, 0.7365591, 0.6637081, 0.673…\n$ `Below Poverty Line` <dbl> 0.7250000, 0.6756757, 0.7138047, 0.7600000, 0.791…\n$ repeat_num           <chr> \"repeat1\", \"repeat1\", \"repeat1\", \"repeat1\", \"repe…\n$ fold_num             <chr> \"fold1\", \"fold2\", \"fold3\", \"fold4\", \"fold5\", \"fol…\n```\n\n\n:::\n:::\n\n\n### Get Median Posterior Probabilities and contrast analyses\n\nfunction\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ncalc_pp <- function (data, dem_var) {\n  \n  if (dem_var == \"sex\") {\n    data <- data |> \n      select(id = repeat_num, id2 = fold_num, Female, Male)\n  } else if (dem_var == \"income\") {\n    data <- data |> \n      select(id = repeat_num, id2 = fold_num, `Below Poverty Line`, `Above Poverty Line`)\n  } else if (dem_var == \"race_ethnicity\") {\n    data <- data |> \n      select(id = repeat_num, id2 = fold_num, `Not White`, `White/Non-Hispanic`)\n  } else {\n    stop(dem_var, \" not in data\")\n  }\n  \n  set.seed(101)\n  pp <- data |> \n    perf_mod(formula = statistic ~ model + (1 | id2/id),\n             transform = tidyposterior::logit_trans,  \n             iter = 2000, chains = 4,  \n             adapt_delta = .99,\n             family = gaussian) \n\n  pp_tidy <- pp |> \n    tidy(seed = 123)\n\n  q = c(.025, .5, .975)\n  ci <- pp_tidy |> \n    group_by(model) |> \n    summarize(pp_median = quantile(posterior, probs = q[2]),\n              pp_lower = quantile(posterior, probs = q[1]), \n              pp_upper = quantile(posterior, probs = q[3]))  |> \n    arrange(model)\n  \n  \n  contrast_lists <- \n    if (dem_var == \"sex\") {\n    c(list(\"Male\"), list(\"Female\"))\n  } else if (dem_var == \"income\") {\n    c(list(\"Above Poverty Line\"), list(\"Below Poverty Line\"))\n  } else if (dem_var == \"race_ethnicity\") {\n    c(list(\"White/Non-Hispanic\"), list(\"Not White\"))\n  } else {\n    stop(dem_var, \" not in data\")\n  }\n      \n  ci_contrast <- pp |>\n    contrast_models(contrast_lists[1],  contrast_lists[2]) |> \n  summary(size = 0) \n  \n  ci_median_contrast <- pp |> \n    contrast_models(contrast_lists[1],  contrast_lists[2]) |>  \n    group_by(contrast) |> \n    summarize(median = quantile(difference, .5)) |> \n    mutate(contrast = str_remove(contrast, \"\\\\.\"))\n\n\nci_contrast <- ci_contrast |> \n    left_join(ci_median_contrast, by = c(\"contrast\")) |> \n    select(contrast, probability, median, lower, upper) \n  \n  list(ci = ci, ci_contrast = ci_contrast)\n}\n```\n:::\n\n\nSex\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsex <- calc_pp(data = auroc_dem, \"sex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 6.9e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.69 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 1.348 seconds (Warm-up)\nChain 1:                0.47 seconds (Sampling)\nChain 1:                1.818 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 5.9e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.59 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.771 seconds (Warm-up)\nChain 2:                0.484 seconds (Sampling)\nChain 2:                1.255 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 2.6e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.798 seconds (Warm-up)\nChain 3:                0.673 seconds (Sampling)\nChain 3:                1.471 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 2.5e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.25 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.763 seconds (Warm-up)\nChain 4:                0.767 seconds (Sampling)\nChain 4:                1.53 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(pp_sex <- pluck(sex, \"ci\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 2 × 4\n  model  pp_median pp_lower pp_upper\n  <chr>      <dbl>    <dbl>    <dbl>\n1 Female     0.670    0.639    0.698\n2 Male       0.726    0.699    0.751\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(contrast_sex <- pluck(sex, \"ci_contrast\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 1 × 5\n  contrast       probability median  lower  upper\n  <chr>                <dbl>  <dbl>  <dbl>  <dbl>\n1 Male vs Female       0.998 0.0559 0.0261 0.0866\n```\n\n\n:::\n:::\n\n\nIncome\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nincome <- calc_pp(data = auroc_dem, \"income\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 2.4e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.24 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 1.36 seconds (Warm-up)\nChain 1:                0.42 seconds (Sampling)\nChain 1:                1.78 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2.3e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.23 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.755 seconds (Warm-up)\nChain 2:                0.624 seconds (Sampling)\nChain 2:                1.379 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 5.7e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.57 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.717 seconds (Warm-up)\nChain 3:                0.42 seconds (Sampling)\nChain 3:                1.137 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 5.8e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.58 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.711 seconds (Warm-up)\nChain 4:                0.425 seconds (Sampling)\nChain 4:                1.136 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(pp_income <- pluck(income, \"ci\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 2 × 4\n  model              pp_median pp_lower pp_upper\n  <chr>                  <dbl>    <dbl>    <dbl>\n1 Above Poverty Line     0.658    0.628    0.685\n2 Below Poverty Line     0.690    0.661    0.717\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(contrast_income <- pluck(income, \"ci_contrast\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 1 × 5\n  contrast                                 probability  median   lower    upper\n  <chr>                                          <dbl>   <dbl>   <dbl>    <dbl>\n1 Above Poverty Line vs Below Poverty Line      0.0335 -0.0331 -0.0618 -0.00397\n```\n\n\n:::\n:::\n\n\nRace/Ethnicity\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrace_eth <- calc_pp(data = auroc_dem, \"race_ethnicity\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 2.6e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.731 seconds (Warm-up)\nChain 1:                0.42 seconds (Sampling)\nChain 1:                1.151 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2.7e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.8 seconds (Warm-up)\nChain 2:                0.432 seconds (Sampling)\nChain 2:                1.232 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 3.9e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.39 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.81 seconds (Warm-up)\nChain 3:                0.42 seconds (Sampling)\nChain 3:                1.23 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 2.3e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.23 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.885 seconds (Warm-up)\nChain 4:                0.822 seconds (Sampling)\nChain 4:                1.707 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(pp_race_eth <- pluck(race_eth, \"ci\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 2 × 4\n  model              pp_median pp_lower pp_upper\n  <chr>                  <dbl>    <dbl>    <dbl>\n1 Not White              0.687    0.653    0.719\n2 White/Non-Hispanic     0.639    0.602    0.674\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n(contrast_race_eth <- pluck(race_eth, \"ci_contrast\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n# A tibble: 1 × 5\n  contrast                        probability  median   lower   upper\n  <chr>                                 <dbl>   <dbl>   <dbl>   <dbl>\n1 White/Non-Hispanic vs Not White      0.0105 -0.0481 -0.0839 -0.0127\n```\n\n\n:::\n:::\n\n\n\nBind all pp/contrast tibbles and save\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npp_sex |> \n  bind_rows(pp_income) |> \n  bind_rows(pp_race_eth) |> \n  write_csv(file.path(path_models, \"pp_dem_all.csv\"))\n\ncontrast_sex |> \n  bind_rows(contrast_income) |> \n  bind_rows(contrast_race_eth) |> \n  write_csv(file.path(path_models, \"pp_dem_contrast_all.csv\"))\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}